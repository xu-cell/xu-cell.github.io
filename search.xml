<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>备战蓝桥杯-数学与简单DP</title>
    <url>/2022/02/22/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF-%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%AE%80%E5%8D%95DP/</url>
    <content><![CDATA[<h1 id="Acing-1212-地宫取宝"><a href="#Acing-1212-地宫取宝" class="headerlink" title="Acing.1212. 地宫取宝"></a>Acing.1212. 地宫取宝</h1><p>X 国王有一个地宫宝库，是 n×m个格子的矩阵，每个格子放一件宝贝，每个宝贝贴着价值标签。</p>
<p>地宫的入口在左上角，出口在右下角。</p>
<p>小明被带到地宫的入口，国王要求他只能向右或向下行走。</p>
<p>走过某个格子时，如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它（当然，也可以不拿）。</p>
<p>当小明走到出口时，如果他手中的宝贝恰好是 k 件，则这些宝贝就可以送给小明。</p>
<p>请你帮小明算一算，在给定的局面下，他有多少种不同的行动方案能获得这 k件宝贝。</p>
<span id="more"></span>

<p> <strong>输入格式</strong></p>
<p>第一行 3个整数，n,m,k含义见题目描述。</p>
<p>接下来 n 行，每行有 m 个整数 Ci 用来描述宝库矩阵每个格子的宝贝价值。</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数，表示正好取 k个宝贝的行动方案数。</p>
<p>该数字可能很大，输出它对 1000000007 取模的结果。</p>
<p><strong>数据范围</strong></p>
<p>1≤n,m≤501≤n,m≤50,<br>1≤k≤121≤k≤12,<br>0≤Ci≤120≤Ci≤12</p>
<p>** 输入样例1：**</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 2 2</span><br><span class="line">1 2</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure>

<p> <strong>输出样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<p><strong>输入样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 3 2</span><br><span class="line">1 2 3</span><br><span class="line">2 1 5</span><br></pre></td></tr></table></figure>

<p> <strong>输出样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<ol>
<li>首先我们观察题目出现“小明被带到地宫的入口，国王要求他只能向右或向下行走。”我们想到我们做过的dp题机器人走迷宫，摘花生。一般是求从左上角走到右下角的所有方案中的“最大值”或者“最小值”</li>
<li>第二，我们观察到“如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它”有点像我们写过的最长递增子序列的问题，确保后面的值比前面的大。同时“当然，也可以不拿。”又有点01背包的味道总的来说，这段话包含两个限制条件：我们在走到一个位置时，可以拿，可以不拿，我们拿的时候要比上一个位置的宝贝价值要大</li>
<li>第三：如果他手中的宝贝恰好是 k件，是我们的方案又多了一个限制条件</li>
</ol>
<p>经过分析我们发现这个题是一个4维DP问题</p>
<ol>
<li><p>状态表示：f[i] [j] [k] [v] 表示从1，1出发到i，j这个位置拿到k件宝贝，且最后一件宝贝的价值为v（第k件）的方案的集合  ；属性：方案数</p>
</li>
<li><p>状态计算：</p>
</li>
</ol>
<p><img src="/images/png_one.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="type">int</span> a[N][N],f[N][N][<span class="number">13</span>][<span class="number">14</span>];</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">          &#123;</span><br><span class="line">              cin&gt;&gt;a[i][j];</span><br><span class="line">              a[i][j]+=<span class="number">1</span>; <span class="comment">//拓展价值【1，3】</span></span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][a[<span class="number">1</span>][<span class="number">1</span>]] = <span class="number">1</span>;<span class="comment">//取第一件物品</span></span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//不取第一件物品的话,意为着其他物品随便取，由题目条件可知要取其他物品，必须保证其他物品的价值比第一件宝贝价值打，所以我们设为0，其他所有宝贝价值统一+1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> cnt = <span class="number">0</span>;cnt&lt;=k;cnt++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> v = <span class="number">0</span>;v&lt;=<span class="number">13</span>;v++)&#123;</span><br><span class="line">                    <span class="type">int</span> &amp;val = f[i][j][cnt][v];</span><br><span class="line">                    val = (val+f[i][j<span class="number">-1</span>][cnt][v])%MOD;</span><br><span class="line">                    val = (val+f[i<span class="number">-1</span>][j][cnt][v])%MOD;</span><br><span class="line">                    <span class="keyword">if</span>(cnt&gt;<span class="number">0</span>&amp;&amp;v == a[i][j])&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> u = <span class="number">0</span>;u&lt;a[i][j];u++)&#123;</span><br><span class="line">                        val = (val+f[i][j<span class="number">-1</span>][cnt<span class="number">-1</span>][u])%MOD;</span><br><span class="line">                        val = (val+f[i<span class="number">-1</span>][j][cnt<span class="number">-1</span>][u])%MOD;</span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;=<span class="number">13</span>;i++)res = (res+f[n][m][k][i])%MOD;</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>备战蓝桥杯-递归与迭代</title>
    <url>/2022/02/18/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF-%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3/</url>
    <content><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="例题（一）：AcWing-92-递归实现指数型枚举"><a href="#例题（一）：AcWing-92-递归实现指数型枚举" class="headerlink" title="例题（一）：AcWing 92. 递归实现指数型枚举"></a>例题（一）：AcWing 92. 递归实现指数型枚举</h2><p>从 1∼n 这 n 个整数中随机选取任意多个，输出所有可能的选择方案。</p>
<p><strong>输入格式</strong></p>
<p>输入一个整数 n。</p>
<p><strong>输出格式</strong></p>
<p>每行输出一种方案。</p>
<p>同一行内的数必须升序排列，相邻两个数用恰好 1 个空格隔开。</p>
<p>对于没有选任何数的方案，输出空行。</p>
<p>本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。</p>
<span id="more"></span>

<p> <strong>数据范围</strong></p>
<p>1≤n≤15</p>
<p> <strong>输入样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p> <strong>输出样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>



<p>思路：从1~n随机选出任意个数，选出不重复的数，同时每个方案是升序排列，所以我们设每个位置有选或者不选两种情况。每一次递归就能确保有一个位置被确定下来。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选与不选</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">16</span>;</span><br><span class="line"><span class="type">int</span>  st[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(st[i] == <span class="number">1</span>)cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>; </span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    st[u] = <span class="number">2</span>;<span class="comment">//选</span></span><br><span class="line">    <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">    st[u] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    st[u] = <span class="number">1</span>;<span class="comment">//不选</span></span><br><span class="line">    <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">    st[u] = <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//填坑写法</span></span><br><span class="line"><span class="comment">//设置：dfs(pos,start,tar)pos:我们要填的坑位置，start:只能选择start(包括start)的后面的数用来填坑。tar:我们要填的坑的个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">16</span>;</span><br><span class="line"><span class="type">int</span> a[N];<span class="comment">//坑</span></span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//什么数被用来填坑了，如果题目要求不用升序，那么每次就可以从1开始看，只要没被选，就可以填进去</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> start,<span class="type">int</span> tar)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos == tar+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=tar;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//注意i&lt;=tar//我们枚举的是要填多少个坑</span></span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = start;i&lt;=n;i++)&#123;</span><br><span class="line">        a[pos] = i;</span><br><span class="line">        <span class="built_in">dfs</span>(pos+<span class="number">1</span>,i+<span class="number">1</span>,tar);</span><br><span class="line">        a[pos] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;endl;<span class="comment">//表示都不填坑的情况</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)<span class="comment">//要填坑的个数</span></span><br><span class="line">       <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为啥不用st数组：因为我们这道题要求升序，start已经保证不可能选到比上一个选择的数要小的数</span></span><br></pre></td></tr></table></figure>





<h2 id="例题（六）：Acwing-1209-带分数"><a href="#例题（六）：Acwing-1209-带分数" class="headerlink" title="例题（六）：Acwing.1209. 带分数"></a>例题（六）：Acwing.1209. 带分数</h2><p>00100 可以表示为带分数的形式：100&#x3D;3+69258714100&#x3D;3+69258714</p>
<p>还可以表示为：100&#x3D;82+3546197100&#x3D;82+3546197</p>
<p>注意特征：带分数中，数字 1∼91∼9 分别出现且只出现一次（不包含 00）。</p>
<p>类似这样的带分数，100100 有 1111 种表示法。</p>
<p> 输入格式</p>
<p>一个正整数。</p>
<p><strong>输出格式</strong></p>
<p>输出输入数字用数码 1∼91∼9 不重复不遗漏地组成带分数表示的全部种数。</p>
<p><strong>数据范围</strong></p>
<p>1≤N&lt;1061≤N&lt;106</p>
<p> <strong>输入样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure>

<p><strong>输出样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure>

<p> <strong>输入样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">105</span><br></pre></td></tr></table></figure>

<p> <strong>输出样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<ul>
<li>思路：1 .全排列1~9，利用数组存下这九个数 ；2.两重循环分割这九个数；3.验证公式获取答案</li>
<li><strong>注意</strong>：分割方法：利用两个指针分割这九个数，同时利用数组求数的公式 a*10+nums[i]求得出这3个数的大小</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> used[N];</span><br><span class="line"><span class="type">int</span> nums[N];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = l;i&lt;=r;i++) &#123;</span><br><span class="line">        res = res*<span class="number">10</span>+nums[i];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分段</span></span><br><span class="line">    <span class="keyword">if</span>(u == <span class="number">9</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">7</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j  = i+<span class="number">1</span>;j&lt;<span class="number">8</span>;j++)&#123;</span><br><span class="line">               <span class="type">int</span> x = <span class="built_in">cal</span>(<span class="number">0</span>,i);</span><br><span class="line">               <span class="keyword">if</span>(x&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">               </span><br><span class="line">               <span class="type">int</span> y = <span class="built_in">cal</span>(i+<span class="number">1</span>,j);</span><br><span class="line">               <span class="type">int</span> z = <span class="built_in">cal</span>(j+<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">               <span class="keyword">if</span>(x*z + y == n*z) &#123;</span><br><span class="line">                       cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">     </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> ;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//全排列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[i]) &#123;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            nums[u] = i;</span><br><span class="line">            <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">            nums[u] = <span class="number">0</span>;</span><br><span class="line">            used[i] =<span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>备战蓝桥杯—二分与前缀和</title>
    <url>/2022/02/20/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF%E2%80%94%E4%BA%8C%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><h2 id="例题（一）：Acwing-730机器人跳跃问题"><a href="#例题（一）：Acwing-730机器人跳跃问题" class="headerlink" title="例题（一）：Acwing.730机器人跳跃问题"></a>例题（一）：Acwing.730机器人跳跃问题</h2><p>机器人正在玩一个古老的基于 DOS 的游戏。</p>
<p>游戏中有 N+1N+1 座建筑——从 00 到 NN 编号，从左到右排列。</p>
<p>编号为 00 的建筑高度为 00 个单位，编号为 ii 的建筑高度为 H(i)H(i) 个单位。</p>
<p>起初，机器人在编号为 00 的建筑处。</p>
<p>每一步，它跳到下一个（右边）建筑。</p>
<span id="more"></span>

<p>假设机器人在第 kk 个建筑，且它现在的能量值是 EE，下一步它将跳到第 k+1k+1 个建筑。</p>
<p>如果 H(k+1)&gt;EH(k+1)&gt;E，那么机器人就失去 H(k+1)−EH(k+1)−E 的能量值，否则它将得到 E−H(k+1)E−H(k+1) 的能量值。</p>
<p>游戏目标是到达第 NN 个建筑，在这个过程中能量值不能为负数个单位。</p>
<p>现在的问题是机器人至少以多少能量值开始游戏，才可以保证成功完成游戏？</p>
<p><strong>输入格式</strong> </p>
<p>第一行输入整数 NN。</p>
<p>第二行是 NN 个空格分隔的整数，H(1),H(2),…,H(N)H(1),H(2),…,H(N) 代表建筑物的高度。</p>
<p>**输出格式 **</p>
<p>输出一个整数，表示所需的最少单位的初始能量值上取整后的结果。</p>
<p>**数据范围 **</p>
<p>1≤N,H(i)≤1051≤N,H(i)≤105,</p>
<p><strong>输入样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">3 4 3 2 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p><strong>输入样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4 4 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p><strong>输入样例3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 6 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<ol>
<li>我们通过递推发现：机器人每过一根柱子，他的E &#x3D; 2E-h[i].我们只要确保每走过一个柱子这个值大于0，就可以确保跳完所有的柱子。</li>
<li>那么如何确定最小值：我们发现只要增加起始能量值，那么跳跃每根柱子所剩余的能量就会增加。那么我们发现能量的最大值为1e5。我们在0—1e5中寻找最小值来满足条件。这个可以用二分来做</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        mid = mid*<span class="number">2</span>-h[i];</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(mid&gt;=<span class="number">1e5</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;h[i];</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>,r = <span class="number">1e5</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
</search>
