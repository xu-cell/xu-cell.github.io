<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>备战蓝桥杯-递归与迭代</title>
    <url>/2022/02/18/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF-%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3/</url>
    <content><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="例题（一）：Acwing-1209-带分数"><a href="#例题（一）：Acwing-1209-带分数" class="headerlink" title="例题（一）：Acwing.1209. 带分数"></a>例题（一）：Acwing.1209. 带分数</h2><p>00100 可以表示为带分数的形式：100&#x3D;3+69258714100&#x3D;3+69258714</p>
<p>还可以表示为：100&#x3D;82+3546197100&#x3D;82+3546197</p>
<p>注意特征：带分数中，数字 1∼91∼9 分别出现且只出现一次（不包含 00）。</p>
<p>类似这样的带分数，100100 有 1111 种表示法。</p>
<span id="more"></span>

<p> 输入格式</p>
<p>一个正整数。</p>
<p><strong>输出格式</strong></p>
<p>输出输入数字用数码 1∼91∼9 不重复不遗漏地组成带分数表示的全部种数。</p>
<p><strong>数据范围</strong></p>
<p>1≤N&lt;1061≤N&lt;106</p>
<p> <strong>输入样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure>

<p><strong>输出样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure>

<p> <strong>输入样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">105</span><br></pre></td></tr></table></figure>

<p> <strong>输出样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<ul>
<li>思路：1 .全排列1~9，利用数组存下这九个数 ；2.两重循环分割这九个数；3.验证公式获取答案</li>
<li><strong>注意</strong>：分割方法：利用两个指针分割这九个数，同时利用数组求数的公式 a*10+nums[i]求得出这3个数的大小</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> used[N];</span><br><span class="line"><span class="type">int</span> nums[N];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = l;i&lt;=r;i++) &#123;</span><br><span class="line">        res = res*<span class="number">10</span>+nums[i];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分段</span></span><br><span class="line">    <span class="keyword">if</span>(u == <span class="number">9</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">7</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j  = i+<span class="number">1</span>;j&lt;<span class="number">8</span>;j++)&#123;</span><br><span class="line">               <span class="type">int</span> x = <span class="built_in">cal</span>(<span class="number">0</span>,i);</span><br><span class="line">               <span class="keyword">if</span>(x&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">               </span><br><span class="line">               <span class="type">int</span> y = <span class="built_in">cal</span>(i+<span class="number">1</span>,j);</span><br><span class="line">               <span class="type">int</span> z = <span class="built_in">cal</span>(j+<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">               <span class="keyword">if</span>(x*z + y == n*z) &#123;</span><br><span class="line">                       cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">     </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> ;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//全排列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[i]) &#123;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            nums[u] = i;</span><br><span class="line">            <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">            nums[u] = <span class="number">0</span>;</span><br><span class="line">            used[i] =<span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>备战蓝桥杯—二分与前缀和</title>
    <url>/2022/02/20/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF%E2%80%94%E4%BA%8C%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><h2 id="例题（一）：Acwing-730机器人跳跃问题"><a href="#例题（一）：Acwing-730机器人跳跃问题" class="headerlink" title="例题（一）：Acwing.730机器人跳跃问题"></a>例题（一）：Acwing.730机器人跳跃问题</h2><p>机器人正在玩一个古老的基于 DOS 的游戏。</p>
<p>游戏中有 N+1N+1 座建筑——从 00 到 NN 编号，从左到右排列。</p>
<p>编号为 00 的建筑高度为 00 个单位，编号为 ii 的建筑高度为 H(i)H(i) 个单位。</p>
<p>起初，机器人在编号为 00 的建筑处。</p>
<p>每一步，它跳到下一个（右边）建筑。</p>
<span id="more"></span>

<p>假设机器人在第 kk 个建筑，且它现在的能量值是 EE，下一步它将跳到第 k+1k+1 个建筑。</p>
<p>如果 H(k+1)&gt;EH(k+1)&gt;E，那么机器人就失去 H(k+1)−EH(k+1)−E 的能量值，否则它将得到 E−H(k+1)E−H(k+1) 的能量值。</p>
<p>游戏目标是到达第 NN 个建筑，在这个过程中能量值不能为负数个单位。</p>
<p>现在的问题是机器人至少以多少能量值开始游戏，才可以保证成功完成游戏？</p>
<p><strong>输入格式</strong> </p>
<p>第一行输入整数 NN。</p>
<p>第二行是 NN 个空格分隔的整数，H(1),H(2),…,H(N)H(1),H(2),…,H(N) 代表建筑物的高度。</p>
<p>**输出格式 **</p>
<p>输出一个整数，表示所需的最少单位的初始能量值上取整后的结果。</p>
<p>**数据范围 **</p>
<p>1≤N,H(i)≤1051≤N,H(i)≤105,</p>
<p><strong>输入样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">3 4 3 2 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p><strong>输入样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4 4 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p><strong>输入样例3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 6 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<ol>
<li>我们通过递推发现：机器人每过一根柱子，他的E &#x3D; 2E-h[i].我们只要确保每走过一个柱子这个值大于0，就可以确保跳完所有的柱子。</li>
<li>那么如何确定最小值：我们发现只要增加起始能量值，那么跳跃每根柱子所剩余的能量就会增加。那么我们发现能量的最大值为1e5。我们在0—1e5中寻找最小值来满足条件。这个可以用二分来做</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        mid = mid*<span class="number">2</span>-h[i];</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(mid&gt;=<span class="number">1e5</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;h[i];</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>,r = <span class="number">1e5</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
</search>
