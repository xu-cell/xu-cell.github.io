<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>备战蓝桥杯-数学与简单DP</title>
    <url>/2022/02/22/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF-%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%AE%80%E5%8D%95DP/</url>
    <content><![CDATA[<h1 id="Acing-1212-地宫取宝"><a href="#Acing-1212-地宫取宝" class="headerlink" title="Acing.1212. 地宫取宝"></a>Acing.1212. 地宫取宝</h1><p>X 国王有一个地宫宝库，是 n×m个格子的矩阵，每个格子放一件宝贝，每个宝贝贴着价值标签。</p>
<p>地宫的入口在左上角，出口在右下角。</p>
<p>小明被带到地宫的入口，国王要求他只能向右或向下行走。</p>
<p>走过某个格子时，如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它（当然，也可以不拿）。</p>
<p>当小明走到出口时，如果他手中的宝贝恰好是 k 件，则这些宝贝就可以送给小明。</p>
<p>请你帮小明算一算，在给定的局面下，他有多少种不同的行动方案能获得这 k件宝贝。</p>
<span id="more"></span>

<p> <strong>输入格式</strong></p>
<p>第一行 3个整数，n,m,k含义见题目描述。</p>
<p>接下来 n 行，每行有 m 个整数 Ci 用来描述宝库矩阵每个格子的宝贝价值。</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数，表示正好取 k个宝贝的行动方案数。</p>
<p>该数字可能很大，输出它对 1000000007 取模的结果。</p>
<p><strong>数据范围</strong></p>
<p>1≤n,m≤501≤n,m≤50,<br>1≤k≤121≤k≤12,<br>0≤Ci≤120≤Ci≤12</p>
<p>** 输入样例1：**</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 2 2</span><br><span class="line">1 2</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure>

<p> <strong>输出样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<p><strong>输入样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 3 2</span><br><span class="line">1 2 3</span><br><span class="line">2 1 5</span><br></pre></td></tr></table></figure>

<p> <strong>输出样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<ol>
<li>首先我们观察题目出现“小明被带到地宫的入口，国王要求他只能向右或向下行走。”我们想到我们做过的dp题机器人走迷宫，摘花生。一般是求从左上角走到右下角的所有方案中的“最大值”或者“最小值”</li>
<li>第二，我们观察到“如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它”有点像我们写过的最长递增子序列的问题，确保后面的值比前面的大。同时“当然，也可以不拿。”又有点01背包的味道总的来说，这段话包含两个限制条件：我们在走到一个位置时，可以拿，可以不拿，我们拿的时候要比上一个位置的宝贝价值要大</li>
<li>第三：如果他手中的宝贝恰好是 k件，是我们的方案又多了一个限制条件</li>
</ol>
<p>经过分析我们发现这个题是一个4维DP问题</p>
<ol>
<li><p>状态表示：f[i] [j] [k] [v] 表示从1，1出发到i，j这个位置拿到k件宝贝，且最后一件宝贝的价值为v（第k件）的方案的集合  ；属性：方案数</p>
</li>
<li><p>状态计算：</p>
</li>
</ol>
<p><img src="/images/png_one.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="type">int</span> a[N][N],f[N][N][<span class="number">13</span>][<span class="number">14</span>];</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">          &#123;</span><br><span class="line">              cin&gt;&gt;a[i][j];</span><br><span class="line">              a[i][j]+=<span class="number">1</span>; <span class="comment">//拓展价值【1，3】</span></span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][a[<span class="number">1</span>][<span class="number">1</span>]] = <span class="number">1</span>;<span class="comment">//取第一件物品</span></span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//不取第一件物品的话,意为着其他物品随便取，由题目条件可知要取其他物品，必须保证其他物品的价值比第一件宝贝价值打，所以我们设为0，其他所有宝贝价值统一+1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> cnt = <span class="number">0</span>;cnt&lt;=k;cnt++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> v = <span class="number">0</span>;v&lt;=<span class="number">13</span>;v++)&#123;</span><br><span class="line">                    <span class="type">int</span> &amp;val = f[i][j][cnt][v];</span><br><span class="line">                    val = (val+f[i][j<span class="number">-1</span>][cnt][v])%MOD;</span><br><span class="line">                    val = (val+f[i<span class="number">-1</span>][j][cnt][v])%MOD;</span><br><span class="line">                    <span class="keyword">if</span>(cnt&gt;<span class="number">0</span>&amp;&amp;v == a[i][j])&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> u = <span class="number">0</span>;u&lt;a[i][j];u++)&#123;</span><br><span class="line">                        val = (val+f[i][j<span class="number">-1</span>][cnt<span class="number">-1</span>][u])%MOD;</span><br><span class="line">                        val = (val+f[i<span class="number">-1</span>][j][cnt<span class="number">-1</span>][u])%MOD;</span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;=<span class="number">13</span>;i++)res = (res+f[n][m][k][i])%MOD;</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>备战蓝桥杯-递归与迭代</title>
    <url>/2022/02/18/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF-%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3/</url>
    <content><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="例题（一）：AcWing-92-递归实现指数型枚举"><a href="#例题（一）：AcWing-92-递归实现指数型枚举" class="headerlink" title="例题（一）：AcWing 92. 递归实现指数型枚举"></a>例题（一）：AcWing 92. 递归实现指数型枚举</h2><p>从 1∼n 这 n 个整数中随机选取任意多个，输出所有可能的选择方案。</p>
<p><strong>输入格式</strong></p>
<p>输入一个整数 n。</p>
<p><strong>输出格式</strong></p>
<p>每行输出一种方案。</p>
<p>同一行内的数必须升序排列，相邻两个数用恰好 1 个空格隔开。</p>
<p>对于没有选任何数的方案，输出空行。</p>
<p>本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。</p>
<span id="more"></span>

<p> <strong>数据范围</strong></p>
<p>1≤n≤15</p>
<p> <strong>输入样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p> <strong>输出样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>



<p>思路：从1~n随机选出任意个数，选出不重复的数，同时每个方案是升序排列，所以我们设每个位置有选或者不选两种情况。每一次递归就能确保有一个位置被确定下来。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选与不选</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">16</span>;</span><br><span class="line"><span class="type">int</span>  st[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(st[i] == <span class="number">1</span>)cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>; </span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    st[u] = <span class="number">2</span>;<span class="comment">//选</span></span><br><span class="line">    <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">    st[u] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    st[u] = <span class="number">1</span>;<span class="comment">//不选</span></span><br><span class="line">    <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">    st[u] = <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//填坑写法</span></span><br><span class="line"><span class="comment">//设置：dfs(pos,start,tar)pos:我们要填的坑位置，start:只能选择start(包括start)的后面的数用来填坑。tar:我们要填的坑的个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">16</span>;</span><br><span class="line"><span class="type">int</span> a[N];<span class="comment">//坑</span></span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//什么数被用来填坑了，如果题目要求不用升序，那么每次就可以从1开始看，只要没被选，就可以填进去</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> start,<span class="type">int</span> tar)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos == tar+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=tar;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//注意i&lt;=tar//我们枚举的是要填多少个坑</span></span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = start;i&lt;=n;i++)&#123;</span><br><span class="line">        a[pos] = i;</span><br><span class="line">        <span class="built_in">dfs</span>(pos+<span class="number">1</span>,i+<span class="number">1</span>,tar);</span><br><span class="line">        a[pos] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;endl;<span class="comment">//表示都不填坑的情况</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)<span class="comment">//要填坑的个数</span></span><br><span class="line">       <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为啥不用st数组：因为我们这道题要求升序，start已经保证不可能选到比上一个选择的数要小的数</span></span><br></pre></td></tr></table></figure>



<h2 id="例题（二）：Acwing-94-递归实现排列型枚举"><a href="#例题（二）：Acwing-94-递归实现排列型枚举" class="headerlink" title="例题（二）：Acwing.94.递归实现排列型枚举"></a>例题（二）：Acwing.94.递归实现排列型枚举</h2><p>把 1∼n 这 n 个整数排成一行后随机打乱顺序，输出所有可能的次序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解法：利用上题的填坑法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> st[N];<span class="comment">//记录某个数是否被选过</span></span><br><span class="line"><span class="type">int</span> path[N];<span class="comment">//记录路径</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> var)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos &gt; var)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)cout&lt;&lt;path[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            path[pos] = i;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(pos+<span class="number">1</span>,n);</span><br><span class="line">            path[pos] = <span class="number">0</span>;</span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="例题（三）：Acwing-717-简单斐波那契"><a href="#例题（三）：Acwing-717-简单斐波那契" class="headerlink" title="例题（三）：Acwing.717.简单斐波那契"></a>例题（三）：Acwing.717.简单斐波那契</h2><p>在一行中输出斐波那契数列的前 NN 项，数字之间用空格隔开。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i] = a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="例题（四）：Acwing-95-费解的开关"><a href="#例题（四）：Acwing-95-费解的开关" class="headerlink" title="例题（四）：Acwing.95. 费解的开关"></a>例题（四）：Acwing.95. 费解的开关</h2><p>你玩过“拉灯”游戏吗？</p>
<p>25 盏灯排成一个 5×5 的方形。</p>
<p>每一个灯都有一个开关，游戏者可以改变它的状态。</p>
<p>每一步，游戏者可以改变某一个灯的状态。</p>
<p>游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。</p>
<p>我们用数字 1表示一盏开着的灯，用数字 0 表示关着的灯。</p>
<p>下面这种状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10111</span><br><span class="line">01101</span><br><span class="line">10111</span><br><span class="line">10000</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>在改变了最左上角的灯的状态后将变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01111</span><br><span class="line">11101</span><br><span class="line">10111</span><br><span class="line">10000</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>再改变它正中间的灯后状态将变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01111</span><br><span class="line">11001</span><br><span class="line">11001</span><br><span class="line">10100</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>给定一些游戏的初始状态，编写程序判断游戏者是否可能在 66 步以内使所有的灯都变亮。</p>
<p><strong>输入格式</strong></p>
<p>第一行输入正整数 n，代表数据中共有 n 个待解决的游戏初始状态。</p>
<p>以下若干行数据分为 n 组，每组数据有 5 行，每行 5 个字符。</p>
<p>每组数据描述了一个游戏的初始状态。</p>
<p>各组数据间用一个空行分隔。</p>
<p><strong>输出格式</strong></p>
<p>一共输出 n行数据，每行有一个小于等于 6的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。</p>
<p>对于某一个游戏初始状态，若 6 步以内无法使所有灯变亮，则输出 −1。</p>
<p><strong>数据范围</strong></p>
<p>0&lt;n≤500</p>
<p><strong>输入样例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">00111</span><br><span class="line">01011</span><br><span class="line">10001</span><br><span class="line">11010</span><br><span class="line">11100</span><br><span class="line"></span><br><span class="line">11101</span><br><span class="line">11101</span><br><span class="line">11110</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line"></span><br><span class="line">01111</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line">11111</span><br></pre></td></tr></table></figure>

<p><strong>输出样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*关键点：每个灯只能按一次。按灯的顺序任意。我们发现对于第一行的操作，完成后，后面的每行的操作就唯一的了</span></span><br><span class="line"><span class="comment">  所以我们只需要枚举第一行的32种操作。</span></span><br><span class="line"><span class="comment">  知识点：位运算 + 偏移量小技巧</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6</span>;</span><br><span class="line"><span class="type">char</span> g[N][N],backup[N][N];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;,dy[<span class="number">5</span>] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">turn</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a = x+dx[i],b = y+dy[i];</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=<span class="number">0</span>&amp;&amp;a&lt;<span class="number">5</span>||b&gt;=<span class="number">0</span>&amp;&amp;b&lt;<span class="number">5</span>)&#123;</span><br><span class="line">            backup[a][b]^=<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)cin&gt;&gt;g[i];</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> res = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;<span class="comment">//对于每一种情况的第一行进行32种操作</span></span><br><span class="line">            <span class="built_in">memcpy</span>(backup,g,<span class="keyword">sizeof</span> backup);</span><br><span class="line">            <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">                <span class="type">int</span> op = i;</span><br><span class="line">                <span class="keyword">if</span>(op&gt;&gt;j&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                    step++;</span><br><span class="line">                    <span class="built_in">turn</span>(<span class="number">0</span>,j);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//翻第一行</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> n = <span class="number">0</span>;n&lt;<span class="number">4</span>;n++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> m = <span class="number">0</span>;m&lt;<span class="number">5</span>;m++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(backup[n][m] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                        step++;</span><br><span class="line">                        <span class="built_in">turn</span>(n+<span class="number">1</span>,m);</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//翻2~4行</span></span><br><span class="line">            <span class="type">int</span> dark = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(backup[<span class="number">4</span>][i] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                    dark = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!dark)res = <span class="built_in">min</span>(res,step);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res&gt;<span class="number">6</span>)cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 例题（六）：Acwing<span class="number">.1209</span>. 带分数</span><br><span class="line"></span><br><span class="line"><span class="number">00100</span> 可以表示为带分数的形式：<span class="number">100</span>=<span class="number">3</span>+<span class="number">69258714100</span>=<span class="number">3</span>+<span class="number">69258714</span></span><br><span class="line"></span><br><span class="line">还可以表示为：<span class="number">100</span>=<span class="number">82</span>+<span class="number">3546197100</span>=<span class="number">82</span>+<span class="number">3546197</span></span><br><span class="line"></span><br><span class="line">注意特征：带分数中，数字 <span class="number">1</span>∼<span class="number">91</span>∼<span class="number">9</span> 分别出现且只出现一次（不包含 <span class="number">00</span>）。</span><br><span class="line"></span><br><span class="line">类似这样的带分数，<span class="number">100100</span> 有 <span class="number">1111</span> 种表示法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 输入格式</span><br><span class="line"></span><br><span class="line">一个正整数。</span><br><span class="line"></span><br><span class="line">**输出格式**</span><br><span class="line"></span><br><span class="line">输出输入数字用数码 <span class="number">1</span>∼<span class="number">91</span>∼<span class="number">9</span> 不重复不遗漏地组成带分数表示的全部种数。</span><br><span class="line"></span><br><span class="line">**数据范围**</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>≤N&lt;<span class="number">1061</span>≤N&lt;<span class="number">106</span></span><br><span class="line"></span><br><span class="line"> **输入样例<span class="number">1</span>：**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>100</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**输出样例1：**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>11</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**输入样例2：**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>105</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**输出样例2：**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 思路：1 .全排列1~9，利用数组存下这九个数 ；2.两重循环分割这九个数；3.验证公式获取答案</span><br><span class="line">- **注意**：分割方法：利用两个指针分割这九个数，同时利用数组求数的公式 a*10+nums[i]求得出这3个数的大小</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 10;</span><br><span class="line">int n;</span><br><span class="line">bool used[N];</span><br><span class="line">int nums[N];</span><br><span class="line">int cnt;</span><br><span class="line">int cal(int l,int r) &#123;</span><br><span class="line">    int res = 0;</span><br><span class="line">    for(int i = l;i&lt;=r;i++) &#123;</span><br><span class="line">        res = res*10+nums[i];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">void dfs(int u) &#123;</span><br><span class="line">    //分段</span><br><span class="line">    if(u == 9) &#123;</span><br><span class="line">        </span><br><span class="line">        for(int i = 0;i&lt;7;i++) &#123;</span><br><span class="line">            for(int j  = i+1;j&lt;8;j++)&#123;</span><br><span class="line">               int x = cal(0,i);</span><br><span class="line">               if(x&gt;n)continue;</span><br><span class="line">               </span><br><span class="line">               int y = cal(i+1,j);</span><br><span class="line">               int z = cal(j+1,8);</span><br><span class="line">               if(x*z + y == n*z) &#123;</span><br><span class="line">                       cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">     </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">       return ;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    //全排列</span><br><span class="line">    for(int i = 1;i&lt;=9;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!used[i]) &#123;</span><br><span class="line">            used[i] = true;</span><br><span class="line">            nums[u] = i;</span><br><span class="line">            dfs(u+1);</span><br><span class="line">            nums[u] = 0;</span><br><span class="line">            used[i] =false;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    dfs(0);</span><br><span class="line">    cout&lt;&lt;cnt;</span><br><span class="line">    return 0;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>备战蓝桥杯—二分与前缀和</title>
    <url>/2022/02/20/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF%E2%80%94%E4%BA%8C%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><h2 id="例题（一）：Acwing-730机器人跳跃问题"><a href="#例题（一）：Acwing-730机器人跳跃问题" class="headerlink" title="例题（一）：Acwing.730机器人跳跃问题"></a>例题（一）：Acwing.730机器人跳跃问题</h2><p>机器人正在玩一个古老的基于 DOS 的游戏。</p>
<p>游戏中有 N+1N+1 座建筑——从 00 到 NN 编号，从左到右排列。</p>
<p>编号为 00 的建筑高度为 00 个单位，编号为 ii 的建筑高度为 H(i)H(i) 个单位。</p>
<p>起初，机器人在编号为 00 的建筑处。</p>
<p>每一步，它跳到下一个（右边）建筑。</p>
<span id="more"></span>

<p>假设机器人在第 kk 个建筑，且它现在的能量值是 EE，下一步它将跳到第 k+1k+1 个建筑。</p>
<p>如果 H(k+1)&gt;EH(k+1)&gt;E，那么机器人就失去 H(k+1)−EH(k+1)−E 的能量值，否则它将得到 E−H(k+1)E−H(k+1) 的能量值。</p>
<p>游戏目标是到达第 NN 个建筑，在这个过程中能量值不能为负数个单位。</p>
<p>现在的问题是机器人至少以多少能量值开始游戏，才可以保证成功完成游戏？</p>
<p><strong>输入格式</strong> </p>
<p>第一行输入整数 NN。</p>
<p>第二行是 NN 个空格分隔的整数，H(1),H(2),…,H(N)H(1),H(2),…,H(N) 代表建筑物的高度。</p>
<p>**输出格式 **</p>
<p>输出一个整数，表示所需的最少单位的初始能量值上取整后的结果。</p>
<p>**数据范围 **</p>
<p>1≤N,H(i)≤1051≤N,H(i)≤105,</p>
<p><strong>输入样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">3 4 3 2 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p><strong>输入样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4 4 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p><strong>输入样例3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 6 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<ol>
<li>我们通过递推发现：机器人每过一根柱子，他的E &#x3D; 2E-h[i].我们只要确保每走过一个柱子这个值大于0，就可以确保跳完所有的柱子。</li>
<li>那么如何确定最小值：我们发现只要增加起始能量值，那么跳跃每根柱子所剩余的能量就会增加。那么我们发现能量的最大值为1e5。我们在0—1e5中寻找最小值来满足条件。这个可以用二分来做</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        mid = mid*<span class="number">2</span>-h[i];</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(mid&gt;=<span class="number">1e5</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;h[i];</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>,r = <span class="number">1e5</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
</search>
