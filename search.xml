<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>备战蓝桥杯-数学与简单DP</title>
    <url>/2022/02/22/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF-%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%AE%80%E5%8D%95DP/</url>
    <content><![CDATA[<h1 id="Acing-1212-地宫取宝"><a href="#Acing-1212-地宫取宝" class="headerlink" title="Acing.1212. 地宫取宝"></a>Acing.1212. 地宫取宝</h1><p>X 国王有一个地宫宝库，是 n×m个格子的矩阵，每个格子放一件宝贝，每个宝贝贴着价值标签。</p>
<p>地宫的入口在左上角，出口在右下角。</p>
<p>小明被带到地宫的入口，国王要求他只能向右或向下行走。</p>
<p>走过某个格子时，如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它（当然，也可以不拿）。</p>
<p>当小明走到出口时，如果他手中的宝贝恰好是 k 件，则这些宝贝就可以送给小明。</p>
<p>请你帮小明算一算，在给定的局面下，他有多少种不同的行动方案能获得这 k件宝贝。</p>
<span id="more"></span>

<p> <strong>输入格式</strong></p>
<p>第一行 3个整数，n,m,k含义见题目描述。</p>
<p>接下来 n 行，每行有 m 个整数 Ci 用来描述宝库矩阵每个格子的宝贝价值。</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数，表示正好取 k个宝贝的行动方案数。</p>
<p>该数字可能很大，输出它对 1000000007 取模的结果。</p>
<p><strong>数据范围</strong></p>
<p>1≤n,m≤501≤n,m≤50,<br>1≤k≤121≤k≤12,<br>0≤Ci≤120≤Ci≤12</p>
<p>** 输入样例1：**</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 2 2</span><br><span class="line">1 2</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure>

<p> <strong>输出样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<p><strong>输入样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 3 2</span><br><span class="line">1 2 3</span><br><span class="line">2 1 5</span><br></pre></td></tr></table></figure>

<p> <strong>输出样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<ol>
<li>首先我们观察题目出现“小明被带到地宫的入口，国王要求他只能向右或向下行走。”我们想到我们做过的dp题机器人走迷宫，摘花生。一般是求从左上角走到右下角的所有方案中的“最大值”或者“最小值”</li>
<li>第二，我们观察到“如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它”有点像我们写过的最长递增子序列的问题，确保后面的值比前面的大。同时“当然，也可以不拿。”又有点01背包的味道总的来说，这段话包含两个限制条件：我们在走到一个位置时，可以拿，可以不拿，我们拿的时候要比上一个位置的宝贝价值要大</li>
<li>第三：如果他手中的宝贝恰好是 k件，是我们的方案又多了一个限制条件</li>
</ol>
<p>经过分析我们发现这个题是一个4维DP问题</p>
<ol>
<li><p>状态表示：f[i] [j] [k] [v] 表示从1，1出发到i，j这个位置拿到k件宝贝，且最后一件宝贝的价值为v（第k件）的方案的集合  ；属性：方案数</p>
</li>
<li><p>状态计算：</p>
</li>
</ol>
<p><img src="/images/png_one.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="type">int</span> a[N][N],f[N][N][<span class="number">13</span>][<span class="number">14</span>];</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">          &#123;</span><br><span class="line">              cin&gt;&gt;a[i][j];</span><br><span class="line">              a[i][j]+=<span class="number">1</span>; <span class="comment">//拓展价值【1，3】</span></span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][a[<span class="number">1</span>][<span class="number">1</span>]] = <span class="number">1</span>;<span class="comment">//取第一件物品</span></span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//不取第一件物品的话,意为着其他物品随便取，由题目条件可知要取其他物品，必须保证其他物品的价值比第一件宝贝价值打，所以我们设为0，其他所有宝贝价值统一+1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> cnt = <span class="number">0</span>;cnt&lt;=k;cnt++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> v = <span class="number">0</span>;v&lt;=<span class="number">13</span>;v++)&#123;</span><br><span class="line">                    <span class="type">int</span> &amp;val = f[i][j][cnt][v];</span><br><span class="line">                    val = (val+f[i][j<span class="number">-1</span>][cnt][v])%MOD;</span><br><span class="line">                    val = (val+f[i<span class="number">-1</span>][j][cnt][v])%MOD;</span><br><span class="line">                    <span class="keyword">if</span>(cnt&gt;<span class="number">0</span>&amp;&amp;v == a[i][j])&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> u = <span class="number">0</span>;u&lt;a[i][j];u++)&#123;</span><br><span class="line">                        val = (val+f[i][j<span class="number">-1</span>][cnt<span class="number">-1</span>][u])%MOD;</span><br><span class="line">                        val = (val+f[i<span class="number">-1</span>][j][cnt<span class="number">-1</span>][u])%MOD;</span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;=<span class="number">13</span>;i++)res = (res+f[n][m][k][i])%MOD;</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Acwing-1214-波动数列"><a href="#Acwing-1214-波动数列" class="headerlink" title="Acwing.1214.波动数列"></a>Acwing.1214.波动数列</h1><p>观察这个数列：</p>
<p>1 3 0 2 -1 1 -2 …</p>
<p>这个数列中后一项总是比前一项增加2或者减少3，<strong>且每一项都为整数</strong>。</p>
<p>栋栋对这种数列很好奇，他想知道长度为 n 和为 s而且后一项总是比前一项增加 a 或者减少 b 的整数数列可能有多少种呢？</p>
<p><strong>输入格式</strong></p>
<p>共一行，包含四个整数 n,s,a,b含义如前面所述。</p>
<p><strong>输出格式</strong></p>
<p>共一行，包含一个整数，表示满足条件的方案数。</p>
<p>由于这个数很大，请输出方案数除以 100000007 的余数。</p>
<p><strong>数据范围</strong></p>
<p>1≤n≤1000<br>−109≤s≤10^9<br>1≤a,b≤10^6</p>
<p> <strong>输入样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">10</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p> <strong>输出样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p> <strong>样例解释</strong></p>
<p>两个满足条件的数列分别是2 4 1 3和7 4 1 -2。</p>
<p>思路:</p>
<ul>
<li>分析题目 我们能推出一个式子  任何一个序列  为： x  ,x+d1 ,x+d1+d2,…….,x+d1+d2+d3…. x+….dn-1加起来推出&#x3D;&gt;nx + (n-1)d1+(n-2)d2+…..dn-1 &#x3D; S  &#x3D;&#x3D;&gt; x &#x3D; (S - (n-1)d1+(n-2)d2+….dn-1)&#x2F;n &#x3D;&gt;这样我们就发现每个d1,d2,d3,..dn-1的不同选择的方案都对应同一个正数x,s,n都是不变值。 为了得到正整数x .我们必须保证S&#x2F;n 与  ((n-1)d1+(n-2)d2+…dn-1)&#x2F;n 的余数要相同 。 </li>
<li>DP分析：这道题就转化为背包问题+方案问题：背包对应选a还是选-b.所以 集合：f[ i] [j ] :选前i个物品，对应的总和  ((n-1)d1+(n-2)d2+…dn-1) %n的余数为j的方案。状态计算：我们将集合划分为 选a和选-b 的方案.选了a或者选了-b 对应的j如何变化：((n-1)d1+(n-2)d2+…dn-1) 我们将这个式子转换一下一样成立：d1+ 2d2+…(n-1)dn-1;所以对于没选第一件物品来说 总和为 C  选了第i件物品： (C+ i*a )%n &#x3D; j %n. 所以 C %n&#x3D; (j - ia)%n ,对应的b -&gt;C%n &#x3D; (j+bi)%n;     所以状态标识为 f[i] [j]  &#x3D;  f[i-1] [(j- a *  i)&amp;n]+f[i-1] [(j+b * i)%n];</li>
<li>答案就是  f[n-1] [s%n]</li>
<li>注意点:为啥是：n-1 通过((n-1)d1+(n-2)d2+…dn-1)我们发现 我们只需要选择n-1 个 d .然后选择出来与 s%余数相同的方案</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> n,s,a,b;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">100000007</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_mod</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a%b+b)%b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;s&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            f[i][j] = (f[i<span class="number">-1</span>][<span class="built_in">get_mod</span>(j-a*i,n)]+f[i<span class="number">-1</span>][<span class="built_in">get_mod</span>(j+b*i,n)])%MOD;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n<span class="number">-1</span>][<span class="built_in">get_mod</span>(s,n)];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>备战蓝桥杯-递归与迭代</title>
    <url>/2022/02/18/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF-%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3/</url>
    <content><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="例题（一）：AcWing-92-递归实现指数型枚举"><a href="#例题（一）：AcWing-92-递归实现指数型枚举" class="headerlink" title="例题（一）：AcWing 92. 递归实现指数型枚举"></a>例题（一）：AcWing 92. 递归实现指数型枚举</h2><p>从 1∼n 这 n 个整数中随机选取任意多个，输出所有可能的选择方案。</p>
<p><strong>输入格式</strong></p>
<p>输入一个整数 n。</p>
<p><strong>输出格式</strong></p>
<p>每行输出一种方案。</p>
<p>同一行内的数必须升序排列，相邻两个数用恰好 1 个空格隔开。</p>
<p>对于没有选任何数的方案，输出空行。</p>
<p>本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。</p>
<span id="more"></span>

<p> <strong>数据范围</strong></p>
<p>1≤n≤15</p>
<p> <strong>输入样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p> <strong>输出样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>



<p>思路：从1~n随机选出任意个数，选出不重复的数，同时每个方案是升序排列，所以我们设每个位置有选或者不选两种情况。每一次递归就能确保有一个位置被确定下来。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选与不选</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">16</span>;</span><br><span class="line"><span class="type">int</span>  st[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(st[i] == <span class="number">1</span>)cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>; </span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    st[u] = <span class="number">2</span>;<span class="comment">//选</span></span><br><span class="line">    <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">    st[u] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    st[u] = <span class="number">1</span>;<span class="comment">//不选</span></span><br><span class="line">    <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">    st[u] = <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//填坑写法</span></span><br><span class="line"><span class="comment">//设置：dfs(pos,start,tar)pos:我们要填的坑位置，start:只能选择start(包括start)的后面的数用来填坑。tar:我们要填的坑的个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">16</span>;</span><br><span class="line"><span class="type">int</span> a[N];<span class="comment">//坑</span></span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//什么数被用来填坑了，如果题目要求不用升序，那么每次就可以从1开始看，只要没被选，就可以填进去</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> start,<span class="type">int</span> tar)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos == tar+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=tar;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//注意i&lt;=tar//我们枚举的是要填多少个坑</span></span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = start;i&lt;=n;i++)&#123;</span><br><span class="line">        a[pos] = i;</span><br><span class="line">        <span class="built_in">dfs</span>(pos+<span class="number">1</span>,i+<span class="number">1</span>,tar);</span><br><span class="line">        a[pos] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;endl;<span class="comment">//表示都不填坑的情况</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)<span class="comment">//要填坑的个数</span></span><br><span class="line">       <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为啥不用st数组：因为我们这道题要求升序，start已经保证不可能选到比上一个选择的数要小的数</span></span><br></pre></td></tr></table></figure>



<h2 id="例题（二）：Acwing-94-递归实现排列型枚举"><a href="#例题（二）：Acwing-94-递归实现排列型枚举" class="headerlink" title="例题（二）：Acwing.94.递归实现排列型枚举"></a>例题（二）：Acwing.94.递归实现排列型枚举</h2><p>把 1∼n 这 n 个整数排成一行后随机打乱顺序，输出所有可能的次序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解法：利用上题的填坑法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> st[N];<span class="comment">//记录某个数是否被选过</span></span><br><span class="line"><span class="type">int</span> path[N];<span class="comment">//记录路径</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> var)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos &gt; var)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)cout&lt;&lt;path[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            path[pos] = i;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(pos+<span class="number">1</span>,n);</span><br><span class="line">            path[pos] = <span class="number">0</span>;</span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="例题（三）：Acwing-717-简单斐波那契"><a href="#例题（三）：Acwing-717-简单斐波那契" class="headerlink" title="例题（三）：Acwing.717.简单斐波那契"></a>例题（三）：Acwing.717.简单斐波那契</h2><p>在一行中输出斐波那契数列的前 NN 项，数字之间用空格隔开。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i] = a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="例题（四）：Acwing-95-费解的开关"><a href="#例题（四）：Acwing-95-费解的开关" class="headerlink" title="例题（四）：Acwing.95. 费解的开关"></a>例题（四）：Acwing.95. 费解的开关</h2><p>你玩过“拉灯”游戏吗？</p>
<p>25 盏灯排成一个 5×5 的方形。</p>
<p>每一个灯都有一个开关，游戏者可以改变它的状态。</p>
<p>每一步，游戏者可以改变某一个灯的状态。</p>
<p>游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。</p>
<p>我们用数字 1表示一盏开着的灯，用数字 0 表示关着的灯。</p>
<p>下面这种状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10111</span><br><span class="line">01101</span><br><span class="line">10111</span><br><span class="line">10000</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>在改变了最左上角的灯的状态后将变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01111</span><br><span class="line">11101</span><br><span class="line">10111</span><br><span class="line">10000</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>再改变它正中间的灯后状态将变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01111</span><br><span class="line">11001</span><br><span class="line">11001</span><br><span class="line">10100</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>给定一些游戏的初始状态，编写程序判断游戏者是否可能在 66 步以内使所有的灯都变亮。</p>
<p><strong>输入格式</strong></p>
<p>第一行输入正整数 n，代表数据中共有 n 个待解决的游戏初始状态。</p>
<p>以下若干行数据分为 n 组，每组数据有 5 行，每行 5 个字符。</p>
<p>每组数据描述了一个游戏的初始状态。</p>
<p>各组数据间用一个空行分隔。</p>
<p><strong>输出格式</strong></p>
<p>一共输出 n行数据，每行有一个小于等于 6的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。</p>
<p>对于某一个游戏初始状态，若 6 步以内无法使所有灯变亮，则输出 −1。</p>
<p><strong>数据范围</strong></p>
<p>0&lt;n≤500</p>
<p><strong>输入样例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">00111</span><br><span class="line">01011</span><br><span class="line">10001</span><br><span class="line">11010</span><br><span class="line">11100</span><br><span class="line"></span><br><span class="line">11101</span><br><span class="line">11101</span><br><span class="line">11110</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line"></span><br><span class="line">01111</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line">11111</span><br></pre></td></tr></table></figure>

<p><strong>输出样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*关键点：每个灯只能按一次。按灯的顺序任意。我们发现对于第一行的操作，完成后，后面的每行的操作就唯一的了</span></span><br><span class="line"><span class="comment">  所以我们只需要枚举第一行的32种操作。</span></span><br><span class="line"><span class="comment">  知识点：位运算 + 偏移量小技巧</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6</span>;</span><br><span class="line"><span class="type">char</span> g[N][N],backup[N][N];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;,dy[<span class="number">5</span>] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">turn</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a = x+dx[i],b = y+dy[i];</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=<span class="number">0</span>&amp;&amp;a&lt;<span class="number">5</span>||b&gt;=<span class="number">0</span>&amp;&amp;b&lt;<span class="number">5</span>)&#123;</span><br><span class="line">            backup[a][b]^=<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)cin&gt;&gt;g[i];</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> res = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;<span class="comment">//对于每一种情况的第一行进行32种操作</span></span><br><span class="line">            <span class="built_in">memcpy</span>(backup,g,<span class="keyword">sizeof</span> backup);</span><br><span class="line">            <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">                <span class="type">int</span> op = i;</span><br><span class="line">                <span class="keyword">if</span>(op&gt;&gt;j&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                    step++;</span><br><span class="line">                    <span class="built_in">turn</span>(<span class="number">0</span>,j);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//翻第一行</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> n = <span class="number">0</span>;n&lt;<span class="number">4</span>;n++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> m = <span class="number">0</span>;m&lt;<span class="number">5</span>;m++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(backup[n][m] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                        step++;</span><br><span class="line">                        <span class="built_in">turn</span>(n+<span class="number">1</span>,m);</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//翻2~4行</span></span><br><span class="line">            <span class="type">int</span> dark = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(backup[<span class="number">4</span>][i] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                    dark = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!dark)res = <span class="built_in">min</span>(res,step);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res&gt;<span class="number">6</span>)cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="例题（五）：Acwing-93-递归实现组合型枚举"><a href="#例题（五）：Acwing-93-递归实现组合型枚举" class="headerlink" title="例题（五）：Acwing.93. 递归实现组合型枚举"></a>例题（五）：Acwing.93. 递归实现组合型枚举</h2><p>从 1∼n 这 n个整数中随机选出 m 个，输出所有可能的选择方案。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">5</span> </span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">5</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//与递归实现排列型枚举很相识。只不过不同判重，因为我们限定了数的枚举顺序</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> path[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> start,<span class="type">int</span> var)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == var+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=m;i++)cout&lt;&lt;path[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = start;i&lt;=n;i++)&#123;</span><br><span class="line">        path[u] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">dfs</span>(u+<span class="number">1</span>,i+<span class="number">1</span>,var);</span><br><span class="line">        </span><br><span class="line">        path[i] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="例题（六）：Acwing-1209-带分数"><a href="#例题（六）：Acwing-1209-带分数" class="headerlink" title="例题（六）：Acwing.1209. 带分数"></a>例题（六）：Acwing.1209. 带分数</h2><p>00100 可以表示为带分数的形式：100&#x3D;3+69258714100&#x3D;3+69258714</p>
<p>还可以表示为：100&#x3D;82+3546197100&#x3D;82+3546197</p>
<p>注意特征：带分数中，数字 1∼91∼9 分别出现且只出现一次（不包含 00）。</p>
<p>类似这样的带分数，100100 有 1111 种表示法。</p>
<p> 输入格式</p>
<p>一个正整数。</p>
<p><strong>输出格式</strong></p>
<p>输出输入数字用数码 1∼91∼9 不重复不遗漏地组成带分数表示的全部种数。</p>
<p><strong>数据范围</strong></p>
<p>1≤N&lt;1061≤N&lt;106</p>
<p> <strong>输入样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure>

<p><strong>输出样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure>

<p> <strong>输入样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">105</span><br></pre></td></tr></table></figure>

<p> <strong>输出样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<ul>
<li>思路：1 .全排列1~9，利用数组存下这九个数 ；2.两重循环分割这九个数；3.验证公式获取答案</li>
<li><strong>注意</strong>：分割方法：利用两个指针分割这九个数，同时利用数组求数的公式 a*10+nums[i]求得出这3个数的大小</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> used[N];</span><br><span class="line"><span class="type">int</span> nums[N];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = l;i&lt;=r;i++) &#123;</span><br><span class="line">        res = res*<span class="number">10</span>+nums[i];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分段</span></span><br><span class="line">    <span class="keyword">if</span>(u == <span class="number">9</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">7</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j  = i+<span class="number">1</span>;j&lt;<span class="number">8</span>;j++)&#123;</span><br><span class="line">               <span class="type">int</span> x = <span class="built_in">cal</span>(<span class="number">0</span>,i);</span><br><span class="line">               <span class="keyword">if</span>(x&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">               </span><br><span class="line">               <span class="type">int</span> y = <span class="built_in">cal</span>(i+<span class="number">1</span>,j);</span><br><span class="line">               <span class="type">int</span> z = <span class="built_in">cal</span>(j+<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">               <span class="keyword">if</span>(x*z + y == n*z) &#123;</span><br><span class="line">                       cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">     </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> ;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//全排列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[i]) &#123;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            nums[u] = i;</span><br><span class="line">            <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">            nums[u] = <span class="number">0</span>;</span><br><span class="line">            used[i] =<span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例题（七）：Acwing-116-飞行员兄弟"><a href="#例题（七）：Acwing-116-飞行员兄弟" class="headerlink" title="例题（七）：Acwing.116. 飞行员兄弟"></a>例题（七）：Acwing.116. 飞行员兄弟</h2><p>“飞行员兄弟”这个游戏，需要玩家顺利的打开一个拥有 16个把手的冰箱。</p>
<p>已知每个把手可以处于以下两种状态之一：打开或关闭。</p>
<p>只有当所有把手都打开时，冰箱才会打开。</p>
<p>把手可以表示为一个 4×4 的矩阵，您可以改变任何一个位置 [i,j] 上把手的状态。</p>
<p>但是，这也会使得第 i行和第 j列上的所有把手的状态也随着改变。</p>
<p>请你求出打开冰箱所需的切换把手的次数最小值是多少。</p>
<p>输入格式</p>
<p>输入一共包含四行，每行包含四个把手的初始状态。</p>
<p>符号 <code>+</code> 表示把手处于闭合状态，而符号 <code>-</code> 表示把手处于打开状态。</p>
<p>至少一个手柄的初始状态是关闭的。</p>
<p> <strong>输出格式</strong></p>
<p>第一行输出一个整数 N，表示所需的最小切换把手次数。</p>
<p>接下来 N 行描述切换顺序，每行输出两个整数，代表被切换状态的把手的行号和列号，数字之间用空格隔开。</p>
<p><strong>注意</strong>：如果存在多种打开冰箱的方式，则按照优先级整体从上到下，同行从左到右打开。</p>
<p> <strong>数据范围</strong></p>
<p>1≤i,j≤4</p>
<p> <strong>输入样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">-+--</span><br><span class="line">----</span><br><span class="line">----</span><br><span class="line">-+--</span><br></pre></td></tr></table></figure>

<p><strong>输出样例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*思路：这道题与费解的开关不同，费解的开关由于操作一个开关只改变上下左右。而这道题是横竖行。所以要改变思路</span></span><br><span class="line"><span class="comment">       我们可以发现数据范围很小，那么我们就可以暴力枚举每一种方案。每一种方案都对应了二进制数0~2^16-1的一个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> g[N][N],backup[N][N];</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;PII;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">4</span>+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">turn_one</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(g[x][y] == <span class="string">&#x27;+&#x27;</span>)g[x][y] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> g[x][y] = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">turn_all</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">turn_one</span>(x,i);</span><br><span class="line">        <span class="built_in">turn_one</span>(i,y);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">turn_one</span>(x,y);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)cin&gt;&gt;g[i];</span><br><span class="line">    vector&lt;PII&gt;res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> op = <span class="number">0</span>;op&lt;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>);op++)&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(backup,g,<span class="keyword">sizeof</span> backup);</span><br><span class="line">        vector&lt;PII&gt;ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((op &gt;&gt; <span class="built_in">get</span>(i,j)) &amp;<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(&#123;i,j&#125;);</span><br><span class="line">                    <span class="built_in">turn_all</span>(i,j);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> is_closed = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">                is_closed = <span class="literal">true</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!is_closed)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="built_in">empty</span>()||ans.<span class="built_in">size</span>()&lt;res.<span class="built_in">size</span>())&#123;</span><br><span class="line">                res = ans;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memcpy</span>(g,backup,<span class="keyword">sizeof</span> g);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> n:res)&#123;</span><br><span class="line">        cout&lt;&lt;n.first+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;n.second+<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例题（八）：Acwing-1208-翻硬币"><a href="#例题（八）：Acwing-1208-翻硬币" class="headerlink" title="例题（八）：Acwing.1208. 翻硬币"></a>例题（八）：Acwing.1208. 翻硬币</h2><p>小明正在玩一个“翻硬币”的游戏。</p>
<p>桌上放着排成一排的若干硬币。我们用 * 表示正面，用 o 表示反面（是小写字母，不是零）。</p>
<p>比如，可能情形是：<code>**oo***oooo</code></p>
<p>如果同时翻转左边的两个硬币，则变为：<code>oooo***oooo</code></p>
<p>现在小明的问题是：如果已知了初始状态和要达到的目标状态，每次只能同时翻转相邻的两个硬币,那么对特定的局面，最少要翻动多少次呢？</p>
<p>我们约定：把翻动相邻的两个硬币叫做一步操作。</p>
<p> 输入格式</p>
<p>两行等长的字符串，分别表示初始状态和要达到的目标状态。</p>
<p> 输出格式</p>
<p>一个整数，表示最小操作步数</p>
<p> 数据范围</p>
<p>输入字符串的长度均不超过100。<br>数据保证答案一定有解。</p>
<p>输入样例1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**********</span><br><span class="line">o****o****</span><br></pre></td></tr></table></figure>

<p> 输出样例1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<p>输入样例2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*o**o***o***</span><br><span class="line">*o***o**o***</span><br></pre></td></tr></table></figure>

<p> 输出样例2：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//思路：暴力枚举对比，如果不同就操作直到最后一个字母</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    string g,s;</span><br><span class="line">    cin&gt;&gt;g&gt;&gt;s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(g[i]!=s[i])&#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">if</span>(g[i+<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span>)g[i+<span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> g[i+<span class="number">1</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>备战蓝桥杯—二分与前缀和</title>
    <url>/2022/02/20/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF%E2%80%94%E4%BA%8C%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><h2 id="例题（一）：Acwing-730机器人跳跃问题"><a href="#例题（一）：Acwing-730机器人跳跃问题" class="headerlink" title="例题（一）：Acwing.730机器人跳跃问题"></a>例题（一）：Acwing.730机器人跳跃问题</h2><p>机器人正在玩一个古老的基于 DOS 的游戏。</p>
<p>游戏中有 N+1N+1 座建筑——从 00 到 NN 编号，从左到右排列。</p>
<p>编号为 00 的建筑高度为 00 个单位，编号为 ii 的建筑高度为 H(i)H(i) 个单位。</p>
<p>起初，机器人在编号为 00 的建筑处。</p>
<p>每一步，它跳到下一个（右边）建筑。</p>
<span id="more"></span>

<p>假设机器人在第 kk 个建筑，且它现在的能量值是 EE，下一步它将跳到第 k+1k+1 个建筑。</p>
<p>如果 H(k+1)&gt;EH(k+1)&gt;E，那么机器人就失去 H(k+1)−EH(k+1)−E 的能量值，否则它将得到 E−H(k+1)E−H(k+1) 的能量值。</p>
<p>游戏目标是到达第 NN 个建筑，在这个过程中能量值不能为负数个单位。</p>
<p>现在的问题是机器人至少以多少能量值开始游戏，才可以保证成功完成游戏？</p>
<p><strong>输入格式</strong> </p>
<p>第一行输入整数 NN。</p>
<p>第二行是 NN 个空格分隔的整数，H(1),H(2),…,H(N)H(1),H(2),…,H(N) 代表建筑物的高度。</p>
<p>**输出格式 **</p>
<p>输出一个整数，表示所需的最少单位的初始能量值上取整后的结果。</p>
<p>**数据范围 **</p>
<p>1≤N,H(i)≤1051≤N,H(i)≤105,</p>
<p><strong>输入样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">3 4 3 2 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p><strong>输入样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4 4 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p><strong>输入样例3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 6 4</span><br></pre></td></tr></table></figure>

<p><strong>输出样例3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<ol>
<li>我们通过递推发现：机器人每过一根柱子，他的E &#x3D; 2E-h[i].我们只要确保每走过一个柱子这个值大于0，就可以确保跳完所有的柱子。</li>
<li>那么如何确定最小值：我们发现只要增加起始能量值，那么跳跃每根柱子所剩余的能量就会增加。那么我们发现能量的最大值为1e5。我们在0—1e5中寻找最小值来满足条件。这个可以用二分来做</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        mid = mid*<span class="number">2</span>-h[i];</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(mid&gt;=<span class="number">1e5</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;h[i];</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>,r = <span class="number">1e5</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划-最长上升子序列模型</title>
    <url>/2022/04/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="基础模型一-：最长上升子序列"><a href="#基础模型一-：最长上升子序列" class="headerlink" title="基础模型一 ：最长上升子序列"></a>基础模型一 ：最长上升子序列</h1><span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*给定一个长度为N的数列(w[N])，求数值严格单调递增的子序列的长度最长是多少。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">样例</span></span><br><span class="line"><span class="comment">输入格式</span></span><br><span class="line"><span class="comment">第一行包含整数N。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二行包含N个整数，表示完整序列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出格式</span></span><br><span class="line"><span class="comment">输出一个整数，表示最大长度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数据范围</span></span><br><span class="line"><span class="comment">1 ≤ N ≤ 1000，</span></span><br><span class="line"><span class="comment">−1e9 ≤ 数列中的数 ≤ 1e9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入样例：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">3 1 2 1 8 5 6</span></span><br><span class="line"><span class="comment">输出样例：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：有两个方法一个动态规划 时间复杂度为 O（n^2）一个为贪心+二分 时间复杂度为 O（nlogn）;</span></span><br><span class="line"><span class="comment">方法一：</span></span><br><span class="line"><span class="comment">    - 状态表示：集合：以i结尾的最长上升子序列，我们表示为f[i],属性为长度最大值</span></span><br><span class="line"><span class="comment">    - 状态计算：我们用i来划分：那么我们可以将集合划分为以1~(i-1)结尾的子序列的长度+1也就是f[i] = max(f[i],f[j]+1)当a[i]&gt;a[j]时取得，j-&gt;[1~i-1];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> f[N];<span class="comment">//以i结尾的最长上升子序列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)f[i] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">          </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])f[i] = <span class="built_in">max</span>(f[i],f[j]+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)res = <span class="built_in">max</span>(res,f[i]);</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法二</span></span><br><span class="line"><span class="comment">  - 我们设置一个数组q记录长度为i的最长上升子序列的最末一个元素，这个数组一定递增，</span></span><br><span class="line"><span class="comment">  -我们遍历a数组中每一个元素，在q中二分找到小于它的最大值我们就可以把a[i]接到后面同时就可以更新答案</span></span><br><span class="line"><span class="comment">   q[r+1] = a[i]就是长度为r+1的最长上升子序列的末尾值为a[i]此时长度len = max(len,r+1);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],q[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = len ;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r+<span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[mid]&lt;a[i])l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        len = <span class="built_in">max</span>(len,r + <span class="number">1</span>);</span><br><span class="line">        q[r+<span class="number">1</span>] = a[i];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;len&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基础模型"><a href="#基础模型" class="headerlink" title="基础模型"></a>基础模型</h2><ol>
<li><p>怪盗基德是一个充满传奇色彩的怪盗，专门以珠宝为目标的超级盗窃犯。</p>
<p>而他最为突出的地方，就是他每次都能逃脱中村警部的重重围堵，而这也很大程度上是多亏了他随身携带的便于操作的滑翔翼。</p>
<p>有一天，怪盗基德像往常一样偷走了一颗珍贵的钻石，不料却被柯南小朋友识破了伪装，而他的滑翔翼的动力装置也被柯南踢出的足球破坏了。</p>
<p>不得已，怪盗基德只能操作受损的滑翔翼逃脱。</p>
<p>假设城市中一共有N幢建筑排成一条线，每幢建筑的高度各不相同。</p>
<p>初始时，怪盗基德可以在任何一幢建筑的顶端。</p>
<p>他可以选择一个方向逃跑，但是不能中途改变方向（因为中森警部会在后面追击）。</p>
<p>因为滑翔翼动力装置受损，他只能往下滑行（即：只能从较高的建筑滑翔到较低的建筑）。</p>
<p>他希望尽可能多地经过不同建筑的顶部，这样可以减缓下降时的冲击力，减少受伤的可能性。</p>
<p>请问，他最多可以经过多少幢不同建筑的顶部(包含初始时的建筑)？</p>
<p> 输入格式</p>
<p>输入数据第一行是一个整数K，代表有K组测试数据。</p>
<p>每组测试数据包含两行：第一行是一个整数N，代表有N幢建筑。第二行包含N个不同的整数，每一个对应一幢建筑的高度h，按照建筑的排列顺序给出。</p>
<p>输出格式</p>
<p>对于每一组测试数据，输出一行，包含一个整数，代表怪盗基德最多可以经过的建筑数量。</p>
<p> 数据范围</p>
<p>1≤K≤100<br>1≤N≤100<br>0&lt;h&lt;10000</p>
<p> 输入样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">300</span> <span class="number">207</span> <span class="number">155</span> <span class="number">299</span> <span class="number">298</span> <span class="number">170</span> <span class="number">158</span> <span class="number">65</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">65</span> <span class="number">158</span> <span class="number">170</span> <span class="number">298</span> <span class="number">299</span> <span class="number">155</span> <span class="number">207</span> <span class="number">300</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>思路：求每个点的最长上升子序列和最长不上升子序列，因为它可以从左右两个方向逃走，同时只能从高到低的滑行，我们可以想象它是一个正三角形。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    cin&gt;&gt;n;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])f[i] = <span class="built_in">max</span>(f[i],f[j]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res,f[i]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = n<span class="number">-1</span>;j&gt;i;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])f[i] = <span class="built_in">max</span>(f[i],f[j]+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res,f[i]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><p>五一到了，ACM队组织大家去登山观光，队员们发现山上一共有N个景点，并且决定按照顺序来浏览这些景点，即每次所浏览景点的编号都要大于前一个浏览景点的编号。</p>
<p>同时队员们还有另一个登山习惯，就是不连续浏览海拔相同的两个景点，并且一旦开始下山，就不再向上走了。</p>
<p>队员们希望在满足上面条件的同时，尽可能多的浏览景点，你能帮他们找出最多可能浏览的景点数么？</p>
<p> 输入格式</p>
<p>第一行包含整数N，表示景点数量。</p>
<p>第二行包含N个整数，表示每个景点的海拔。</p>
<p>输出格式</p>
<p>输出一个整数，表示最多能浏览的景点数。</p>
<p>数据范围</p>
<p>2≤N≤1000</p>
<p> 输入样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">186</span> <span class="number">186</span> <span class="number">150</span> <span class="number">200</span> <span class="number">160</span> <span class="number">130</span> <span class="number">197</span> <span class="number">220</span></span><br></pre></td></tr></table></figure>

<p> 输出样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>思路：转化一波，题目问的就是每个点的最长上升子序列（上山）和最长下降子序列（下山）加 起来那个点最大！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> d[N],up[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        up[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])up[i] = <span class="built_in">max</span>(up[i],up[j]+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        d[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = n<span class="number">-1</span>;j&gt;i;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])d[i] = <span class="built_in">max</span>(d[i],d[j]+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)res = <span class="built_in">max</span>(res,d[i]+up[i]<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>N 位同学站成一排，音乐老师要请其中的 (N−K)(N−K) 位同学出列，使得剩下的 KK 位同学排成合唱队形。     </p>
<p>合唱队形是指这样的一种队形：设 KK 位同学从左到右依次编号为 1，2…K他们的身高分别为 T1，T2，…，TK  则他们的身高满足 T1&lt;…Ti+1&gt;…&gt;TK(1&lt;i&lt;k )</p>
<p>你的任务是，已知所有 N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</p>
<p> 输入格式</p>
<p>输入的第一行是一个整数 N，表示同学的总数。</p>
<p>第二行有 NN 个整数，用空格分隔，第 i 个整数 Ti 是第 i位同学的身高(厘米)。</p>
<p> 输出格式</p>
<p>输出包括一行，这一行只包含一个整数，就是最少需要几位同学出列。</p>
<p>数据范围</p>
<p>2≤N≤100<br>130≤Ti≤230</p>
<p> 输入样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">186</span> <span class="number">186</span> <span class="number">150</span> <span class="number">200</span> <span class="number">160</span> <span class="number">130</span> <span class="number">197</span> <span class="number">220</span></span><br></pre></td></tr></table></figure>

<p> 输出样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>思路：与登山思路相同 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> d[N],up[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        up[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])up[i] = <span class="built_in">max</span>(up[i],up[j]+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        d[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = n<span class="number">-1</span>;j&gt;i;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])d[i] = <span class="built_in">max</span>(d[i],d[j]+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)res = <span class="built_in">max</span>(res,d[i]+up[i]<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>Palmia国有一条横贯东西的大河，河有笔直的南北两岸，岸上各有位置各不相同的N个城市。</p>
<p>北岸的每个城市有且仅有一个友好城市在南岸，而且不同城市的友好城市不相同。</p>
<p>每对友好城市都向政府申请在河上开辟一条直线航道连接两个城市，但是由于河上雾太大，政府决定避免任意两条航道交叉，以避免事故。</p>
<p>编程帮助政府做出一些批准和拒绝申请的决定，使得在保证任意两条航线不相交的情况下，被批准的申请尽量多。</p>
<p> 输入格式</p>
<p>第1行，一个整数N，表示城市数。</p>
<p>第2行到第n+1行，每行两个整数，中间用1个空格隔开，分别表示南岸和北岸的一对友好城市的坐标。</p>
<p> 输出格式</p>
<p>仅一行，输出一个整数，表示政府所能批准的最多申请数。</p>
<p> 数据范围</p>
<p>1≤N≤5000<br>0≤xi≤10000</p>
<p> 输入样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">22</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span></span><br><span class="line"><span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="number">15</span> <span class="number">12</span></span><br><span class="line"><span class="number">9</span> <span class="number">8</span></span><br><span class="line"><span class="number">17</span> <span class="number">17</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p> 输出样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>思路：怎么才能避免相撞呢，只有河两岸的城市对是递增的.那么如何才能得到更多的航线呢，我们只能先排序一遍的河岸，然后求另一遍河岸的最长上升子序列。就能保证北批准的航线数量最多</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;PII;</span><br><span class="line">PII a[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i].first&gt;&gt;a[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i].second&gt;a[j].second)f[i] = <span class="built_in">max</span>(f[i],f[j]+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)res = <span class="built_in">max</span>(res,f[i]);</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>求一段序列的最大上升子序和</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        f[i] = a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])f[i] = <span class="built_in">max</span>(f[i],f[j]+a[i]);<span class="comment">//以i结尾的上升子序列的最大值。</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)res = <span class="built_in">max</span>(res,f[i]);</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="拓展模型-导弹模型（dp-贪心-x2F-dp-贪心-dfs）"><a href="#拓展模型-导弹模型（dp-贪心-x2F-dp-贪心-dfs）" class="headerlink" title="拓展模型-导弹模型（dp+贪心 &#x2F;dp+贪心+dfs）"></a>拓展模型-导弹模型（dp+贪心 &#x2F;dp+贪心+dfs）</h2><h1 id="基础模型二：最长公共子序列"><a href="#基础模型二：最长公共子序列" class="headerlink" title="基础模型二：最长公共子序列"></a>基础模型二：最长公共子序列</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定两个长度分别为 N 和 M 的字符串 A 和 B，求既是 A 的子序列又是 B 的子序列的字符串长度最长是多少。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入格式</span></span><br><span class="line"><span class="comment">第一行包含两个整数 N 和 M。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二行包含一个长度为 N 的字符串，表示字符串 A。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第三行包含一个长度为 M 的字符串，表示字符串 B。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">字符串均由小写字母构成。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出格式</span></span><br><span class="line"><span class="comment">输出一个整数，表示最大长度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数据范围</span></span><br><span class="line"><span class="comment">1≤N,M≤1000</span></span><br><span class="line"><span class="comment">输入样例：</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">acbd</span></span><br><span class="line"><span class="comment">abedc</span></span><br><span class="line"><span class="comment">输出样例：</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：- 状态表示：f[i][j]:包含a字符串（1~i）,且包围b字符串（1~j）的所有公共子序列  属性：最大值</span></span><br><span class="line"><span class="comment">     - 状态计算：我们以最后一个字符来分割集合：当a[i]==b[j]时，f[i][j] = max(f[i][j],f[i-1][j-1]+1) </span></span><br><span class="line"><span class="comment">                当a[i]!=b[j]时，我们的状态就是来自于包含i，不包含j,或者包含j，不包含i，或者两个都不包含（前面两个情况可以包含这中情况），f[i][j] = max(f[i-1][j],f[i][j-1]).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=  <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    cin&gt;&gt;a+<span class="number">1</span>&gt;&gt;b+<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i<span class="number">-1</span>][j],f[i][j<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(a[i] == b[j])f[i][j] = <span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Acwing</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
</search>
